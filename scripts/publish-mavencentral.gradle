apply plugin: 'maven-publish'
apply plugin: 'signing'
apply from: rootProject.file('scripts/publish-info.gradle')

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')

    if (project.plugins.findPlugin("com.android.library")) {

        // For Android libraries

        from android.sourceSets.main.java.srcDirs

        from android.sourceSets.main.kotlin.srcDirs

    } else {

        // For pure Kotlin libraries, in case you have them

        from sourceSets.main.java.srcDirs

        from sourceSets.main.kotlin.srcDirs

    }

}


artifacts {
    archives androidSourcesJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')

if (secretPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is ->
        p.load(is)
    }

    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

publishing {
    publications {
        release(MavenPublication) {
            groupId PUBLISH_GROUP_ID

            artifactId PUBLISH_ARTIFACT_ID

            version PUBLISH_VERSION


            if (project.plugins.findPlugin("com.android.library")) {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            } else {
                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            }
            artifact androidSourcesJar


            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'An implementation of Cucumber for Android which generates the tests classes at compile time instead of runtime '
                url = 'https://github.com/fourlastor/pickle'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/fourlastor/pickle/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'fourlastor'
                        name = 'Daniele Conti'
                    }
                }

                scm {
                    connection = 'scm:git:github.com/fourlastor/pickle.git'
                    developerConnection = 'scm:git:ssh://github.com/fourlastor/pickle.git'
                    url = 'https://github.com/fourlastor/pickle/tree/main'
                }

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    // The repository to publish to, Sonatype/MavenCentral
    repositories {
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}
